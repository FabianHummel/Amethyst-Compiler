Begin
Expr
Assign = Token Name, Expr Value
Binary = Expr Left, Token Operator, Expr Right
Call = Expr Callee, Token Paren, IList<Expr> Arguments
Grouping = Expr Expression
Literal = object Value
Logical = Expr Left, Token Operator, Expr Right
Unary = Token Operator, Expr Right
Variable = Token Name
End

Begin
Stmt
Block = IList<Stmt> Statements
Expression = Expr Expr
Function = bool Ticking, bool Initializing, Token Name, IList<Token> Params, IList<Stmt> Body
If = Expr Condition, Stmt ThenBranch, Stmt? ElseBranch
Print = Expr Expr
Return = Token Keyword, Expr? Value
Var = Token Name, Expr? Initializer
While = Expr Condition, Stmt Body
End